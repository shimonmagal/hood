apply plugin: 'java'
apply plugin: 'application'

group 'hood'
version '1.0-SNAPSHOT'

mainClassName = "com.hood.server.HoodServer"

sourceCompatibility = 1.8

repositories {
	mavenCentral()
}

dependencies {
	compile 'org.glassfish.jersey.containers:jersey-container-jdk-http:2.29.1'
	compile 'org.glassfish.jersey.core:jersey-server:2.29.1'
	compile 'org.glassfish.jersey.media:jersey-media-multipart:2.29.1'
	compile 'org.glassfish.jersey.inject:jersey-hk2:2.29.1'
	compile 'org.glassfish.jaxb:jaxb-runtime:2.3.1'
	compile 'javax.xml.bind:jaxb-api:2.3.0'
	compile 'com.google.api-client:google-api-client:1.30.9'
	compile 'com.google.guava:guava:29.0-jre'
	compile 'com.google.code.gson:gson:2.8.6'
	compile 'ch.qos.logback:logback-classic:1.2.3'
	compile 'com.fasterxml.jackson.core:jackson-databind:2.11.0'
	compile 'org.mongodb:mongodb-driver-sync:4.0.3'
	compile 'org.cfg4j:cfg4j-core:4.4.1'
	compile 'org.apache.commons:commons-lang3:3.10'
}

distributions {
	main {
		contents {
			from 'conf', {
				into 'conf'
			}
		}
	}
}

task generateScripts(dependsOn:"jar") {
	doLast {
		def binDir = new File("$rootDir/bin")
		binDir.mkdirs();

		def osName = System.getProperty("os.name").toLowerCase()

		def lines
		def ext

		if (osName.contains("windows")) {
			ext = "bat"
		} else {
			ext = "sh"
		}

		def scriptFile = new File("$binDir/${projectDir.name}.$ext")
		def classPath = configurations.runtime.resolve()
		classPath += jar.archivePath
		def classPathStr = classPath.join(File.pathSeparator)

		print osName

		if (osName.contains("windows")) {
			lines = [
					"@echo off",
					"",
					"   java -cp $classPathStr $mainClassName %*"
			]
		} else {
			lines = [
					"#!/bin/bash",
					"",
					"   java -cp $classPathStr $mainClassName \$@"
			]
		}

		scriptFile.write(lines.join("\n"))
		scriptFile.setExecutable(true)
	}
}

build.dependsOn("generateScripts")
